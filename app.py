import streamlit as st
import wikipediaapi
import requests
import json
import re
import os
import google.generativeai as genai
from google.generativeai.types import HarmCategory, HarmBlockThreshold

# -----------------------------
# Streamlit page configuration
st.set_page_config(page_title="родрооро┐ро┤рпН родроХро╡ро▓рпН роЙродро╡ро┐ропро╛ро│ро░рпН", page_icon="ЁЯУЪ", layout="wide")

# -----------------------------
# Initialize Wikipedia API for Tamil with a proper User-Agent
wiki_ta = wikipediaapi.Wikipedia(
    language='ta',
    extract_format=wikipediaapi.ExtractFormat.WIKI,
    user_agent='TamilAIAssistant/1.0 (contact@tamilai.com)'
)

# Also initialize English Wikipedia (for fallback translation)
wiki_en = wikipediaapi.Wikipedia(
    language='en',
    extract_format=wikipediaapi.ExtractFormat.WIKI,
    user_agent='TamilAIAssistant/1.0 (contact@tamilai.com)'
)

# -----------------------------
# System Instructions for Gemini AI (родрооро┐ро┤ро┐ро▓рпН)
SYSTEM_INSTRUCTIONS = """
роирпАроЩрпНроХро│рпН роТро░рпБ родрооро┐ро┤рпН родроХро╡ро▓рпН роорпЗро▓ро╛рогрпНроорпИ роЙродро╡ро┐ропро╛ро│ро░рпН. роЙроЩрпНроХро│рпН рокрогро┐ рокропройро░рпБроХрпНроХрпБ родрпБро▓рпНро▓ро┐ропрооро╛рой, роироорпНрокроХрооро╛рой рооро▒рпНро▒рпБроорпН роЪрпАро░ро╛рой родроХро╡ро▓рпНроХро│рпИ ро╡ро┤роЩрпНроХрпБро╡родро╛роХрпБроорпН.

роорпБроХрпНроХро┐роп ро╡ро┐родро┐роорпБро▒рпИроХро│рпН:
if the user give greetings, then you should give greetings
if the user ask for information, then you should give information

1. роОро▓рпНро▓ро╛ рокродро┐ро▓рпНроХро│рпИропрпБроорпН родрооро┐ро┤ро┐ро▓рпН роороЯрпНроЯрпБроорпЗ ро╡ро┤роЩрпНроХро╡рпБроорпН.
2. роорпБродро▓ро┐ро▓рпН ро╡ро┐роХрпНроХро┐рокрпНрокрпАроЯро┐ропро╛ родрпЗроЯро▓рпН роЪрпЖропрпНропро╡рпБроорпН. 
3. ро╡ро┐роХрпНроХро┐рокрпНрокрпАроЯро┐ропро╛ро╡ро┐ро▓рпН родрпЗро╡рпИропро╛рой родроХро╡ро▓рпН роХро┐роЯрпИроХрпНроХро╛ро╡ро┐роЯрпНроЯро╛ро▓рпН роЕро▓рпНро▓родрпБ родроХро╡ро▓рпН роХрпБро▒рпИро╡ро╛роХ роЗро░рпБроирпНродро╛ро▓рпН, роХрпВроХрпБро│рпН родрпЗроЯро▓рпИроХрпН роХрпКрогрпНроЯрпБ родрпЗро╡рпИропро╛рой роорпБро┤рпБроорпИропро╛рой родроХро╡ро▓рпИ рокрпЖро▒ро╡рпБроорпН.
4. родрпЗроЯро▓рпНроХро│ро┐ро▓рпН роХро┐роЯрпИродрпНрод родроХро╡ро▓рпИ роороЯрпНроЯрпБроорпН рокропройрпНрокроЯрпБродрпНродро┐, родро╡ро▒ро╛рой роЕро▓рпНро▓родрпБ роХро▒рпНрокройрпИропро╛рой (hallucinated) родроХро╡ро▓рпИ ро╡ро┤роЩрпНроХ ро╡рпЗрогрпНроЯро╛роорпН.
5. родрооро┐ро┤рпН роЗро▓роХрпНроХро┐ропроорпН, ро╡ро░ро▓ро╛ро▒рпБ, рокрогрпНрокро╛роЯрпБ, роЪроЩрпНроХ роЗро▓роХрпНроХро┐ропроорпН рооро▒рпНро▒рпБроорпН рокро┤роирпНродрооро┐ро┤рпН роЗро▓роХрпНроХро┐ропроорпН родрпКроЯро░рпНрокро╛рой роХрпЗро│рпНро╡ро┐роХро│рпБроХрпНроХрпБ ро╡ро┐ро░ро┐ро╡ро╛рой ро╡ро┐ро│роХрпНроХроорпН ро╡ро┤роЩрпНроХро╡рпБроорпН.
6. рокродро┐ро▓рпИ роЙро░рпБро╡ро╛роХрпНроХрпБроорпН рокрпЛродрпБ, роорпБродро▓ро┐ро▓рпН роХро┐роЯрпИродрпНрод родроХро╡ро▓рпИ (ро╡ро┐роХрпНроХро┐рокрпНрокрпАроЯро┐ропро╛/роХрпВроХрпБро│рпН) роиройрпНроХрпБ роЪро┐роирпНродро┐родрпНродрпБ, роЕро╡ро▒рпНро▒рпИ роЕроЯро┐рокрпНрокроЯрпИропро╛роХроХрпН роХрпКрогрпНроЯрпБ, родрпЖро│ро┐ро╡ро╛рой родро▓рпИрокрпНрокрпБ, ро╡ро┐ро│роХрпНроХроорпН рооро▒рпНро▒рпБроорпН родроХро╡ро▓рпН роЖродро╛ро░родрпНродрпИ (роЙродро╛ро░рогрооро╛роХ: "ро╡ро┐роХрпНроХро┐рокрпНрокрпАроЯро┐ропро╛" роЕро▓рпНро▓родрпБ "роХрпВроХрпБро│рпН родрпЗроЯро▓рпН") роХрпБро▒ро┐рокрпНрокро┐роЯро╡рпБроорпН.
7. "родрпЖро░ро┐ропро╡ро┐ро▓рпНро▓рпИ" роОройрпНро▒ роиро┐ро▓рпИ роПро▒рпНрокроЯрпНроЯро╛ро▓рпН, "роЗроирпНродроХрпН роХрпЗро│рпНро╡ро┐роХрпНроХрпБ роОройроХрпНроХрпБ родрпБро▓рпНро▓ро┐ропрооро╛рой рокродро┐ро▓рпН родрпЖро░ро┐ропро╡ро┐ро▓рпНро▓рпИ" роОрой рокродро┐ро▓рпН родро░ро╡рпБроорпН.
"""

# -----------------------------
# Function to fetch Wikipedia content (Tamil preferred)
def get_wikipedia_content(query):
    try:
        # роорпБродро▓ро┐ро▓рпН роирпЗро░роЯро┐ (exact match) родрпЗроЯро▓рпН
        page = wiki_ta.page(query)
        if page.exists():
            summary = page.summary.strip()
            if len(summary) > 100:
                return summary[0:1500]  # роЪрпБро░рпБроХрпНроХроорпН, character limit
        # роХрогрпНроЯро▒ро┐роп родро╡ро▒ро┐ройро╛ро▓рпН, роЪро┐ро▓ родрооро┐ро┤рпНродрпНродрпКроХрпБрокрпНрокрпБ (categories) роЪрпЗро░рпНродрпНродрпБ роорпБропро▒рпНроЪро┐ роЪрпЖропрпНроХ
        tamil_categories = ['родрооро┐ро┤рпН', 'роЗро▓роХрпНроХро┐ропроорпН', 'ро╡ро░ро▓ро╛ро▒рпБ', 'рокрогрпНрокро╛роЯрпБ', 'роХро╡ро┐родрпИ', 'роЪроЩрпНроХ роЗро▓роХрпНроХро┐ропроорпН']
        for category in tamil_categories:
            combined_query = f"{query} {category}"
            page = wiki_ta.page(combined_query)
            if page.exists():
                summary = page.summary.strip()
                if len(summary) > 100:
                    return summary[0:1500]
        # fallback: роЖроЩрпНроХро┐ро▓ ро╡ро┐роХрпНроХро┐рокрпНрокрпАроЯро┐ропро╛ роорпВро▓роорпН
        eng_page = wiki_en.page(query)
        if eng_page.exists():
            summary = eng_page.summary.strip()
            if len(summary) > 100:
                return f"[родрооро┐ро┤рпН ро╡ро┐роХрпНроХро┐рокрпНрокрпАроЯро┐ропро╛ро╡ро┐ро▓рпН родроХро╡ро▓рпН роХро┐роЯрпИроХрпНроХро╡ро┐ро▓рпНро▓рпИ. роЖроЩрпНроХро┐ро▓ ро╡ро┐роХрпНроХро┐рокрпНрокрпАроЯро┐ропро╛ родроХро╡ро▓рпН:]\n{summary[0:1000]}"
        return None
    except Exception as e:
        st.error(f"Wikipedia error: {str(e)}")
        return None

# -----------------------------
# Function to fetch Google Search content using Google Custom Search API
def get_google_content(query):
    try:
        if not st.session_state.google_api_key or not st.session_state.google_cx:
            st.warning("роХрпВроХрпБро│рпН родрпЗроЯро▓рпН API ро╡ро┐роЪрпИроХро│рпН роЕроорпИроХрпНроХрокрпНрокроЯро╡ро┐ро▓рпНро▓рпИ.")
            return None
        url = "https://www.googleapis.com/customsearch/v1"
        params = {
            "q": query,
            "key": st.session_state.google_api_key,
            "cx": st.session_state.google_cx,
            "lr": "lang_ta"  # родрооро┐ро┤рпН роорпКро┤ро┐ роорпБродро▓рпН
        }
        response = requests.get(url, params=params)
        data = response.json()
        if "items" in data:
            snippets = [item.get("snippet", "") for item in data["items"]]
            combined = "\n".join(snippets).strip()
            if combined:
                return combined[0:1500]
        return None
    except Exception as e:
        st.error(f"Google Search error: {str(e)}")
        return None

# -----------------------------
# Setup Gemini API (using st.cache_resource to reuse the configuration)
@st.cache_resource
def setup_genai():
    try:
        genai.configure(api_key=st.session_state.api_key)
        return True
    except Exception as e:
        st.error(f"API initialization error: {str(e)}")
        return False

# -----------------------------
# Generate response using Gemini AI with robust decision making
def generate_response(query):
    try:
        # роорпБродро▓ро┐ро▓рпН ро╡ро┐роХрпНроХро┐рокрпНрокрпАроЯро┐ропро╛ родрпЗроЯро▓рпН
        wiki_content = get_wikipedia_content(query)
        google_content = None
        
        # ро╡ро┐роХрпНроХро┐рокрпНрокрпАроЯро┐ропро╛ родроХро╡ро▓рпН роЗро▓рпНро▓ро╛ро╡ро┐роЯрпНроЯро╛ро▓рпН роЕро▓рпНро▓родрпБ родроХро╡ро▓рпН роХрпБро▒рпИро╡ро╛роХ роЗро░рпБроирпНродро╛ро▓рпН, роХрпВроХрпБро│рпН родрпЗроЯро▓рпИропрпБроорпН роЪрпЖропрпНропро╡рпБроорпН.
        if not wiki_content or (wiki_content and len(wiki_content) < 300):
            google_content = get_google_content(query)
        
        # Build the full prompt for Gemini API
        full_prompt = SYSTEM_INSTRUCTIONS + "\n\n"
        full_prompt += f"роХрпЗро│рпНро╡ро┐: {query}\n\n"
        if wiki_content:
            full_prompt += f"ро╡ро┐роХрпНроХро┐рокрпНрокрпАроЯро┐ропро╛ родроХро╡ро▓рпН:\n{wiki_content}\n\n"
        if google_content:
            full_prompt += f"роХрпВроХрпБро│рпН родрпЗроЯро▓рпН родроХро╡ро▓рпН:\n{google_content}\n\n"
        full_prompt += "роорпЗро▒рпНроХрогрпНроЯ родроХро╡ро▓рпНроХро│рпИ (роЗро░рпБрокрпНрокро┐ройрпН) рокропройрпНрокроЯрпБродрпНродро┐, родрпБро▓рпНро▓ро┐ропрооро╛рой, роироорпНрокроХрооро╛рой рооро▒рпНро▒рпБроорпН родрпЖро│ро┐ро╡ро╛рой родрооро┐ро┤рпН рокродро┐ро▓рпИ роЙро░рпБро╡ро╛роХрпНроХро╡рпБроорпН."
        
        # Safety settings for Gemini API
        safety_settings = {
            HarmCategory.HARM_CATEGORY_HARASSMENT: HarmBlockThreshold.BLOCK_NONE,
            HarmCategory.HARM_CATEGORY_HATE_SPEECH: HarmBlockThreshold.BLOCK_NONE,
            HarmCategory.HARM_CATEGORY_SEXUALLY_EXPLICIT: HarmBlockThreshold.BLOCK_NONE,
            HarmCategory.HARM_CATEGORY_DANGEROUS_CONTENT: HarmBlockThreshold.BLOCK_NONE,
        }
        
        # Get Gemini model instance (adjust model_name and generation_config as needed)
        model = genai.GenerativeModel(
            model_name="gemini-1.5-flash",
            generation_config={
                "temperature": 0.1,
                "top_p": 0.95,
                "top_k": 40,
                "max_output_tokens": 5600,
            },
            safety_settings=safety_settings
        )
        
        # Generate the content
        response = model.generate_content(full_prompt)
        response_text = response.text
        
        # родрпАро░рпНрооро╛ройроорпН: роОроирпНрод родрпЗроЯро▓рпН роЖродро╛ро░роорпН рокропройрпНрокроЯрпБродрпНродрокрпНрокроЯрпНроЯродрпБ роОройрпНрокродрпИ роХрпБро▒ро┐рокрпНрокрпБ
        if wiki_content and not google_content:
            source_used = "ро╡ро┐роХрпНроХро┐рокрпНрокрпАроЯро┐ропро╛"
        elif google_content and not wiki_content:
            source_used = "роХрпВроХрпБро│рпН родрпЗроЯро▓рпН"
        elif wiki_content and google_content:
            source_used = "ро╡ро┐роХрпНроХро┐рокрпНрокрпАроЯро┐ропро╛ рооро▒рпНро▒рпБроорпН роХрпВроХрпБро│рпН родрпЗроЯро▓рпН"
        else:
            source_used = "родроХро╡ро▓рпН роЖродро╛ро░роорпН роХро┐роЯрпИроХрпНроХро╡ро┐ро▓рпНро▓рпИ"
            
        return response_text, source_used, full_prompt
        
    except Exception as e:
        st.error(f"Error generating response: {str(e)}")
        return "рокродро┐ро▓рпН роЙро░рпБро╡ро╛роХрпНроХрпБро╡родро┐ро▓рпН рокро┐ро┤рпИ роПро▒рпНрокроЯрпНроЯродрпБ. роорпАрогрпНроЯрпБроорпН роорпБропро▒рпНроЪро┐роХрпНроХро╡рпБроорпН.", None, None

# -----------------------------
# Streamlit UI (Chat Interface)
st.title("ЁЯУЪ родрооро┐ро┤рпН родроХро╡ро▓рпН роЙродро╡ро┐ропро╛ро│ро░рпН")
st.markdown("родрооро┐ро┤рпН ро╡ро░ро▓ро╛ро▒рпБ, роЗро▓роХрпНроХро┐ропроорпН, рокрогрпНрокро╛роЯрпБ рокро▒рпНро▒ро┐роп роЙроЩрпНроХро│рпН роХрпЗро│рпНро╡ро┐роХро│рпБроХрпНроХрпБ родрпБро▓рпНро▓ро┐ропрооро╛рой рокродро┐ро▓рпНроХро│рпИрокрпН рокрпЖро▒рпБроЩрпНроХро│рпН")

# Sidebar for API keys and application info
with st.sidebar:
    st.header("тЪЩя╕П роЕроорпИрокрпНрокрпБроХро│рпН")
    
    # Initialize session state variables if they don't exist
    if 'api_key' not in st.session_state:
        st.session_state.api_key = ""
    if 'google_api_key' not in st.session_state:
        st.session_state.google_api_key = ""
    if 'google_cx' not in st.session_state:
        st.session_state.google_cx = ""
    
    # Gemini API key input
    api_key = st.text_input("Gemini API Key", value=st.session_state.api_key, type="password")
    if api_key:
        st.session_state.api_key = api_key
        
    # Google API key input
    google_api_key = st.text_input("Google API Key", value=st.session_state.google_api_key, type="password")
    if google_api_key:
        st.session_state.google_api_key = google_api_key
        
    # Google CX input
    google_cx = st.text_input("Google CX (Custom Search Engine ID)", value=st.session_state.google_cx, type="password")
    if google_cx:
        st.session_state.google_cx = google_cx
    
    # Check if all required keys are provided
    if api_key and google_api_key and google_cx:
        st.success("роЕройрпИродрпНродрпБ API ро╡ро┐роЪрпИроХро│рпБроорпН роЪрпЗрооро┐роХрпНроХрокрпНрокроЯрпНроЯрой!")
    else:
        required_keys = []
        if not api_key:
            required_keys.append("Gemini API Key")
        if not google_api_key:
            required_keys.append("Google API Key")
        if not google_cx:
            required_keys.append("Google CX")
        
        if required_keys:
            st.warning(f"роЗроирпНрод роЪрпЖропро▓ро┐ропрпИ роорпБро┤рпБроорпИропро╛роХ рокропройрпНрокроЯрпБродрпНрод рокро┐ройрпНро╡ро░рпБроорпН ро╡ро┐роЪрпИроХро│рпН родрпЗро╡рпИ: {', '.join(required_keys)}")
    
    st.markdown("---")
    st.markdown("""
    ### рокропройрпНрокро╛роЯрпБ рокро▒рпНро▒ро┐
    роЗроирпНрод роЪрпЖропро▓ро┐, ро╡ро┐роХрпНроХро┐рокрпНрокрпАроЯро┐ропро╛ рооро▒рпНро▒рпБроорпН (родрпЗро╡рпИрокрпНрокроЯрпНроЯро╛ро▓рпН) роХрпВроХрпБро│рпН родрпЗроЯро▓рпИрокрпН рокропройрпНрокроЯрпБродрпНродро┐, 
    родрооро┐ро┤рпН роЗро▓роХрпНроХро┐ропроорпН, ро╡ро░ро▓ро╛ро▒рпБ, рокрогрпНрокро╛роЯрпБ рооро▒рпНро▒рпБроорпН роЪроЩрпНроХ роЗро▓роХрпНроХро┐ропроорпН родрпКроЯро░рпНрокро╛рой родрпБро▓рпНро▓ро┐ропрооро╛рой родроХро╡ро▓рпНроХро│рпИ ро╡ро┤роЩрпНроХрпБроХро┐ро▒родрпБ.
    
    роЙродро╛ро░рог роХрпЗро│рпНро╡ро┐роХро│рпН:
    - родро┐ро░рпБроХрпНроХрпБро▒ро│рпН рокро▒рпНро▒ро┐роп родроХро╡ро▓рпН
    - роЪроЩрпНроХ роЗро▓роХрпНроХро┐роп роХро╛ро▓роорпН
    - родрооро┐ро┤рпН рооройрпНройро░рпНроХро│рпН ро╡ро░ро▓ро╛ро▒рпБ
    - рокро▓рпНро▓ро╡ро░рпН роХро╛ро▓родрпНродрпБ роХроЯрпНроЯро┐роЯроХрпНроХро▓рпИ
    """)

# Initialize chat session state
if 'messages' not in st.session_state:
    st.session_state.messages = []

# Display chat messages
for message in st.session_state.messages:
    with st.chat_message(message["role"]):
        st.markdown(message["content"])
        if "source_type" in message and message["source_type"]:
            st.caption(f"родроХро╡ро▓рпН роЖродро╛ро░роорпН: {message['source_type']}")

# User input
if query := st.chat_input("роЙроЩрпНроХро│рпН роХрпЗро│рпНро╡ро┐ропрпИ родрооро┐ро┤ро┐ро▓рпН роХрпЗро│рпБроЩрпНроХро│рпН..."):
    if 'api_key' not in st.session_state or not st.session_state.api_key:
        st.error("Gemini API key родрпЗро╡рпИ. родропро╡рпБроЪрпЖропрпНродрпБ sidebar-роЗро▓рпН роЪрпЗро░рпНроХрпНроХро╡рпБроорпН.")
    else:
        # Add user message to chat history
        st.session_state.messages.append({"role": "user", "content": query})
        with st.chat_message("user"):
            st.markdown(query)
            
        # Show a spinner while processing
        with st.chat_message("assistant"):
            with st.spinner("рокродро┐ро▓рпН родропро╛ро░ро╛роХро┐ро▒родрпБ..."):
                if setup_genai():
                    response, source_used, full_prompt = generate_response(query)
                    st.session_state.messages.append({
                        "role": "assistant",
                        "content": response,
                        "source_type": source_used,
                        "sources": f"**Prompt used:**\n```\n{full_prompt}\n```" if full_prompt else ""
                    })
                    st.markdown(response)

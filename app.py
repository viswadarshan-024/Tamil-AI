import streamlit as st
import wikipediaapi
import requests
import json
import re
import time
from datetime import datetime
import google.generativeai as genai
from google.generativeai.types import HarmCategory, HarmBlockThreshold

# -----------------------------
# Streamlit page configuration
st.set_page_config(
    page_title="‡Æ§‡ÆÆ‡Æø‡Æ¥‡Øç ‡Æ§‡Æï‡Æµ‡Æ≤‡Øç ‡Æâ‡Æ§‡Æµ‡Æø‡ÆØ‡Ææ‡Æ≥‡Æ∞‡Øç", 
    page_icon="ü™∑", 
    layout="wide",
    initial_sidebar_state="expanded"
)

# -----------------------------
# Custom CSS for better UI
st.markdown("""
<style>
    /* Main container styling */
    .main {
        padding: 1rem;
    }
    
    /* Chat message styling */
    .stChatMessage {
        background-color: rgba(255, 255, 255, 0.05);
        border-radius: 10px;
        padding: 10px;
        margin-bottom: 10px;
    }
    
    /* Header styling */
    .header-container {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        padding: 2rem;
        border-radius: 15px;
        margin-bottom: 2rem;
        text-align: center;
        box-shadow: 0 10px 30px rgba(0,0,0,0.1);
    }
    
    .header-title {
        color: white;
        font-size: 2.5rem;
        font-weight: bold;
        margin-bottom: 0.5rem;
    }
    
    .header-subtitle {
        color: rgba(255,255,255,0.9);
        font-size: 1.1rem;
    }
    
    /* Sidebar styling */
    .sidebar-info {
        background-color: rgba(102, 126, 234, 0.1);
        padding: 15px;
        border-radius: 10px;
        margin: 10px 0;
    }
    
    /* Status indicator */
    .status-indicator {
        display: inline-block;
        width: 10px;
        height: 10px;
        border-radius: 50%;
        margin-right: 5px;
    }
    
    .status-active {
        background-color: #4ade80;
        animation: pulse 2s infinite;
    }
    
    .status-inactive {
        background-color: #f87171;
    }
    
    @keyframes pulse {
        0% {
            box-shadow: 0 0 0 0 rgba(74, 222, 128, 0.7);
        }
        70% {
            box-shadow: 0 0 0 10px rgba(74, 222, 128, 0);
        }
        100% {
            box-shadow: 0 0 0 0 rgba(74, 222, 128, 0);
        }
    }
    
    /* Source badge styling */
    .source-badge {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        padding: 5px 15px;
        border-radius: 20px;
        font-size: 0.85rem;
        display: inline-block;
        margin-top: 10px;
    }
    
    /* Quick action buttons */
    .quick-action-btn {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        padding: 10px 20px;
        border-radius: 25px;
        border: none;
        cursor: pointer;
        margin: 5px;
        transition: transform 0.3s;
    }
    
    .quick-action-btn:hover {
        transform: translateY(-2px);
    }
    
    /* Loading animation */
    .loading-dots {
        display: inline-flex;
        align-items: center;
    }
    
    .loading-dots span {
        display: inline-block;
        width: 8px;
        height: 8px;
        border-radius: 50%;
        background-color: #667eea;
        margin: 0 3px;
        animation: bounce 1.4s infinite ease-in-out both;
    }
    
    .loading-dots span:nth-child(1) {
        animation-delay: -0.32s;
    }
    
    .loading-dots span:nth-child(2) {
        animation-delay: -0.16s;
    }
    
    @keyframes bounce {
        0%, 80%, 100% {
            transform: scale(0);
        }
        40% {
            transform: scale(1);
        }
    }
</style>
""", unsafe_allow_html=True)

# -----------------------------
# Load API keys from Streamlit secrets
@st.cache_data
def load_api_keys():
    """Load API keys from Streamlit secrets"""
    try:
        return {
            'gemini_api_key': st.secrets.get("GEMINI_API_KEY", ""),
            'google_api_key': st.secrets.get("GOOGLE_API_KEY", ""),
            'google_cx': st.secrets.get("GOOGLE_CX", "")
        }
    except Exception as e:
        st.error(f"API ‡Æµ‡Æø‡Æö‡Øà‡Æï‡Æ≥‡Øà ‡Æè‡Æ±‡Øç‡Æ±‡ØÅ‡Æµ‡Æ§‡Æø‡Æ≤‡Øç ‡Æ™‡Æø‡Æ¥‡Øà: {str(e)}")
        return {
            'gemini_api_key': "",
            'google_api_key': "",
            'google_cx': ""
        }

# Load keys at startup
API_KEYS = load_api_keys()

# -----------------------------
# Initialize Wikipedia API for Tamil with a proper User-Agent
@st.cache_resource
def get_wiki_instances():
    """Initialize Wikipedia API instances"""
    wiki_ta = wikipediaapi.Wikipedia(
        language='ta',
        extract_format=wikipediaapi.ExtractFormat.WIKI,
        user_agent='TamilAIAssistant/2.0 (streamlit.app)'
    )
    
    wiki_en = wikipediaapi.Wikipedia(
        language='en',
        extract_format=wikipediaapi.ExtractFormat.WIKI,
        user_agent='TamilAIAssistant/2.0 (streamlit.app)'
    )
    
    return wiki_ta, wiki_en

wiki_ta, wiki_en = get_wiki_instances()

# -----------------------------
# System Instructions for Gemini AI (Enhanced)
SYSTEM_INSTRUCTIONS = """
‡Æ®‡ØÄ‡Æô‡Øç‡Æï‡Æ≥‡Øç ‡Æí‡Æ∞‡ØÅ ‡ÆÆ‡Øá‡ÆÆ‡Øç‡Æ™‡Æü‡Øç‡Æü ‡Æ§‡ÆÆ‡Æø‡Æ¥‡Øç ‡Æ§‡Æï‡Æµ‡Æ≤‡Øç ‡ÆÆ‡Øá‡Æ≤‡Ææ‡Æ£‡Øç‡ÆÆ‡Øà ‡Æâ‡Æ§‡Æµ‡Æø‡ÆØ‡Ææ‡Æ≥‡Æ∞‡Øç. ‡Æâ‡Æô‡Øç‡Æï‡Æ≥‡Øç ‡Æ™‡Æ£‡Æø ‡Æ™‡ÆØ‡Æ©‡Æ∞‡ØÅ‡Æï‡Øç‡Æï‡ØÅ ‡Æ§‡ØÅ‡Æ≤‡Øç‡Æ≤‡Æø‡ÆØ‡ÆÆ‡Ææ‡Æ©, ‡Æ®‡ÆÆ‡Øç‡Æ™‡Æï‡ÆÆ‡Ææ‡Æ© ‡ÆÆ‡Æ±‡Øç‡Æ±‡ØÅ‡ÆÆ‡Øç ‡Æµ‡Æø‡Æ∞‡Æø‡Æµ‡Ææ‡Æ© ‡Æ§‡Æï‡Æµ‡Æ≤‡Øç‡Æï‡Æ≥‡Øà ‡Æµ‡Æ¥‡Æô‡Øç‡Æï‡ØÅ‡Æµ‡Æ§‡Ææ‡Æï‡ØÅ‡ÆÆ‡Øç.

‡ÆÆ‡ØÅ‡Æï‡Øç‡Æï‡Æø‡ÆØ ‡Æµ‡Æø‡Æ§‡Æø‡ÆÆ‡ØÅ‡Æ±‡Øà‡Æï‡Æ≥‡Øç:

1. **‡ÆÆ‡Øä‡Æ¥‡Æø**: ‡Æé‡Æ≤‡Øç‡Æ≤‡Ææ ‡Æ™‡Æ§‡Æø‡Æ≤‡Øç‡Æï‡Æ≥‡Øà‡ÆØ‡ØÅ‡ÆÆ‡Øç ‡Æ§‡ØÇ‡ÆØ ‡Æ§‡ÆÆ‡Æø‡Æ¥‡Æø‡Æ≤‡Øç ‡ÆÆ‡Æü‡Øç‡Æü‡ØÅ‡ÆÆ‡Øá ‡Æµ‡Æ¥‡Æô‡Øç‡Æï‡Æµ‡ØÅ‡ÆÆ‡Øç. ‡Æ§‡Øá‡Æµ‡Øà‡Æ™‡Øç‡Æ™‡Æü‡Øç‡Æü‡Ææ‡Æ≤‡Øç ‡ÆÖ‡Æü‡Øà‡Æ™‡Øç‡Æ™‡ØÅ‡Æï‡Øç‡Æï‡ØÅ‡Æ±‡Æø‡Æï‡Øç‡Æï‡ØÅ‡Æ≥‡Øç ‡ÆÜ‡Æô‡Øç‡Æï‡Æø‡Æ≤ ‡Æö‡Øä‡Æ±‡Øç‡Æï‡Æ≥‡Øà ‡Æï‡ØÅ‡Æ±‡Æø‡Æ™‡Øç‡Æ™‡Æø‡Æü‡Æ≤‡Ææ‡ÆÆ‡Øç.

2. **‡Æ§‡Øá‡Æü‡Æ≤‡Øç ‡Æµ‡Æ∞‡Æø‡Æö‡Øà**:
   - ‡ÆÆ‡ØÅ‡Æ§‡Æ≤‡Æø‡Æ≤‡Øç ‡Æµ‡Æø‡Æï‡Øç‡Æï‡Æø‡Æ™‡Øç‡Æ™‡ØÄ‡Æü‡Æø‡ÆØ‡Ææ ‡Æ§‡Øá‡Æü‡Æ≤‡Øç ‡Æö‡ØÜ‡ÆØ‡Øç‡ÆØ‡Æµ‡ØÅ‡ÆÆ‡Øç
   - ‡Æ§‡Æï‡Æµ‡Æ≤‡Øç ‡Æ™‡Øã‡Æ§‡ØÅ‡ÆÆ‡Ææ‡Æ©‡Æ§‡Ææ‡Æï ‡Æá‡Æ≤‡Øç‡Æ≤‡Ææ‡Æµ‡Æø‡Æü‡Øç‡Æü‡Ææ‡Æ≤‡Øç ‡Æï‡ØÇ‡Æï‡ØÅ‡Æ≥‡Øç ‡Æ§‡Øá‡Æü‡Æ≤‡Øç ‡Æö‡ØÜ‡ÆØ‡Øç‡ÆØ‡Æµ‡ØÅ‡ÆÆ‡Øç
   - ‡Æá‡Æ∞‡Æ£‡Øç‡Æü‡ØÅ ‡ÆÜ‡Æ§‡Ææ‡Æ∞‡Æô‡Øç‡Æï‡Æ≥‡Øà‡ÆØ‡ØÅ‡ÆÆ‡Øç ‡Æí‡Æ™‡Øç‡Æ™‡Æø‡Æü‡Øç‡Æü‡ØÅ ‡Æö‡Æø‡Æ±‡Æ®‡Øç‡Æ§ ‡Æ§‡Æï‡Æµ‡Æ≤‡Øà ‡Æ§‡Øá‡Æ∞‡Øç‡Æµ‡ØÅ ‡Æö‡ØÜ‡ÆØ‡Øç‡ÆØ‡Æµ‡ØÅ‡ÆÆ‡Øç

3. **‡Æ™‡Æ§‡Æø‡Æ≤‡Øç ‡ÆÖ‡ÆÆ‡Øà‡Æ™‡Øç‡Æ™‡ØÅ**:
   - ‡Æ§‡ØÜ‡Æ≥‡Æø‡Æµ‡Ææ‡Æ© ‡Æ§‡Æ≤‡Øà‡Æ™‡Øç‡Æ™‡ØÅ
   - ‡Æµ‡Æø‡Æ∞‡Æø‡Æµ‡Ææ‡Æ© ‡Æµ‡Æø‡Æ≥‡Æï‡Øç‡Æï‡ÆÆ‡Øç
   - ‡ÆÆ‡ØÅ‡Æï‡Øç‡Æï‡Æø‡ÆØ ‡ÆÖ‡ÆÆ‡Øç‡Æö‡Æô‡Øç‡Æï‡Æ≥‡Øç (bullet points)
   - ‡Æ§‡Æï‡Æµ‡Æ≤‡Øç ‡ÆÜ‡Æ§‡Ææ‡Æ∞‡ÆÆ‡Øç

4. **‡Æö‡Æø‡Æ±‡Æ™‡Øç‡Æ™‡ØÅ ‡Æï‡Æµ‡Æ©‡ÆÆ‡Øç**:
   - ‡Æ§‡ÆÆ‡Æø‡Æ¥‡Øç ‡Æá‡Æ≤‡Æï‡Øç‡Æï‡Æø‡ÆØ‡ÆÆ‡Øç, ‡Æµ‡Æ∞‡Æ≤‡Ææ‡Æ±‡ØÅ, ‡Æ™‡Æ£‡Øç‡Æ™‡Ææ‡Æü‡ØÅ ‡Æ§‡Øä‡Æü‡Æ∞‡Øç‡Æ™‡Ææ‡Æ© ‡Æï‡Øá‡Æ≥‡Øç‡Æµ‡Æø‡Æï‡Æ≥‡ØÅ‡Æï‡Øç‡Æï‡ØÅ ‡Æµ‡Æø‡Æ∞‡Æø‡Æµ‡Ææ‡Æ© ‡Æµ‡Æø‡Æ≥‡Æï‡Øç‡Æï‡ÆÆ‡Øç
   - ‡Æö‡Æô‡Øç‡Æï ‡Æá‡Æ≤‡Æï‡Øç‡Æï‡Æø‡ÆØ‡ÆÆ‡Øç, ‡Æ™‡Æï‡Øç‡Æ§‡Æø ‡Æá‡Æ≤‡Æï‡Øç‡Æï‡Æø‡ÆØ‡ÆÆ‡Øç, ‡Æ®‡Æµ‡ØÄ‡Æ© ‡Æá‡Æ≤‡Æï‡Øç‡Æï‡Æø‡ÆØ‡ÆÆ‡Øç ‡Æ™‡Øã‡Æ©‡Øç‡Æ±‡Æµ‡Æ±‡Øç‡Æ±‡Æø‡Æ±‡Øç‡Æï‡ØÅ ‡Æï‡Ææ‡Æ≤‡Æï‡Øç‡Æï‡Æø‡Æ∞‡ÆÆ ‡Æµ‡Æø‡Æ≥‡Æï‡Øç‡Æï‡ÆÆ‡Øç
   - ‡Æ§‡ÆÆ‡Æø‡Æ¥‡Øç ‡ÆÆ‡Æ©‡Øç‡Æ©‡Æ∞‡Øç‡Æï‡Æ≥‡Øç, ‡Æ™‡Øã‡Æ∞‡Øç‡Æï‡Æ≥‡Øç, ‡Æµ‡Æ∞‡Æ≤‡Ææ‡Æ±‡Øç‡Æ±‡ØÅ ‡Æ®‡Æø‡Æï‡Æ¥‡Øç‡Æµ‡ØÅ‡Æï‡Æ≥‡ØÅ‡Æï‡Øç‡Æï‡ØÅ ‡Æ§‡Øá‡Æ§‡Æø ‡ÆÆ‡Æ±‡Øç‡Æ±‡ØÅ‡ÆÆ‡Øç ‡Æá‡Æü‡ÆÆ‡Øç ‡Æï‡ØÅ‡Æ±‡Æø‡Æ™‡Øç‡Æ™‡Æø‡Æü‡Æµ‡ØÅ‡ÆÆ‡Øç

5. **‡Æµ‡Ææ‡Æ¥‡Øç‡Æ§‡Øç‡Æ§‡ØÅ‡Æï‡Æ≥‡Øç ‡ÆÆ‡Æ±‡Øç‡Æ±‡ØÅ‡ÆÆ‡Øç ‡Æâ‡Æ∞‡Øà‡ÆØ‡Ææ‡Æü‡Æ≤‡Øç**:
   - ‡Æ™‡ÆØ‡Æ©‡Æ∞‡Øç ‡Æµ‡Æ£‡Æï‡Øç‡Æï‡ÆÆ‡Øç ‡Æö‡Øä‡Æ©‡Øç‡Æ©‡Ææ‡Æ≤‡Øç ‡ÆÖ‡Æ©‡Øç‡Æ™‡ØÅ‡Æü‡Æ©‡Øç ‡Æ™‡Æ§‡Æø‡Æ≤‡Øç ‡Æµ‡Æ£‡Æï‡Øç‡Æï‡ÆÆ‡Øç ‡Æö‡Øä‡Æ≤‡Øç‡Æ≤‡Æµ‡ØÅ‡ÆÆ‡Øç
   - ‡Æâ‡Æ∞‡Øà‡ÆØ‡Ææ‡Æü‡Æ≤‡Øà ‡Æá‡Æ©‡Æø‡ÆÆ‡Øà‡ÆØ‡Ææ‡Æï‡Æµ‡ØÅ‡ÆÆ‡Øç ‡ÆÆ‡Æ∞‡Æø‡ÆØ‡Ææ‡Æ§‡Øà‡ÆØ‡ØÅ‡Æü‡Æ©‡ØÅ‡ÆÆ‡Øç ‡Æ®‡Æü‡Æ§‡Øç‡Æ§‡Æµ‡ØÅ‡ÆÆ‡Øç

6. **‡Æ§‡ØÅ‡Æ≤‡Øç‡Æ≤‡Æø‡ÆØ‡ÆÆ‡Øç**:
   - ‡Æï‡Æø‡Æü‡Øà‡Æ§‡Øç‡Æ§ ‡Æ§‡Æï‡Æµ‡Æ≤‡Øà ‡ÆÆ‡Æü‡Øç‡Æü‡ØÅ‡ÆÆ‡Øç ‡Æ™‡ÆØ‡Æ©‡Øç‡Æ™‡Æü‡ØÅ‡Æ§‡Øç‡Æ§‡Æµ‡ØÅ‡ÆÆ‡Øç
   - ‡Æï‡Æ±‡Øç‡Æ™‡Æ©‡Øà ‡Æ§‡Æï‡Æµ‡Æ≤‡Øà (hallucination) ‡Æ§‡Æµ‡Æø‡Æ∞‡Øç‡Æï‡Øç‡Æï‡Æµ‡ØÅ‡ÆÆ‡Øç
   - ‡Æ§‡ØÜ‡Æ∞‡Æø‡ÆØ‡Ææ‡Æ§ ‡Æµ‡Æø‡Æ∑‡ÆØ‡Æô‡Øç‡Æï‡Æ≥‡ØÅ‡Æï‡Øç‡Æï‡ØÅ "‡Æ§‡ØÅ‡Æ≤‡Øç‡Æ≤‡Æø‡ÆØ‡ÆÆ‡Ææ‡Æ© ‡Æ§‡Æï‡Æµ‡Æ≤‡Øç ‡Æï‡Æø‡Æü‡Øà‡Æï‡Øç‡Æï‡Æµ‡Æø‡Æ≤‡Øç‡Æ≤‡Øà" ‡Æé‡Æ© ‡Æï‡ØÅ‡Æ±‡Æø‡Æ™‡Øç‡Æ™‡Æø‡Æü‡Æµ‡ØÅ‡ÆÆ‡Øç

7. **‡ÆÆ‡ØÅ‡Æï‡Øç‡Æï‡Æø‡ÆØ ‡Æ§‡Æ≤‡Øà‡Æ™‡Øç‡Æ™‡ØÅ‡Æï‡Æ≥‡Øç**:
   - ‡Æ§‡Æø‡Æ∞‡ØÅ‡Æï‡Øç‡Æï‡ØÅ‡Æ±‡Æ≥‡Øç ‡ÆÆ‡Æ±‡Øç‡Æ±‡ØÅ‡ÆÆ‡Øç ‡Æ§‡Æø‡Æ∞‡ØÅ‡Æµ‡Æ≥‡Øç‡Æ≥‡ØÅ‡Æµ‡Æ∞‡Øç
   - ‡Æö‡Æô‡Øç‡Æï ‡Æá‡Æ≤‡Æï‡Øç‡Æï‡Æø‡ÆØ‡ÆÆ‡Øç (‡Æé‡Æü‡Øç‡Æü‡ØÅ‡Æ§‡Øç‡Æ§‡Øä‡Æï‡Øà, ‡Æ™‡Æ§‡Øç‡Æ§‡ØÅ‡Æ™‡Øç‡Æ™‡Ææ‡Æü‡Øç‡Æü‡ØÅ)
   - ‡Æö‡Æø‡Æ≤‡Æ™‡Øç‡Æ™‡Æ§‡Æø‡Æï‡Ææ‡Æ∞‡ÆÆ‡Øç, ‡ÆÆ‡Æ£‡Æø‡ÆÆ‡Øá‡Æï‡Æ≤‡Øà ‡Æ™‡Øã‡Æ©‡Øç‡Æ± ‡Æï‡Ææ‡Æ™‡Øç‡Æ™‡Æø‡ÆØ‡Æô‡Øç‡Æï‡Æ≥‡Øç
   - ‡Æ™‡Æï‡Øç‡Æ§‡Æø ‡Æá‡Æ≤‡Æï‡Øç‡Æï‡Æø‡ÆØ ‡ÆÜ‡Æ¥‡Øç‡Æµ‡Ææ‡Æ∞‡Øç‡Æï‡Æ≥‡Øç, ‡Æ®‡Ææ‡ÆØ‡Æ©‡Øç‡ÆÆ‡Ææ‡Æ∞‡Øç‡Æï‡Æ≥‡Øç
   - ‡Æ§‡ÆÆ‡Æø‡Æ¥‡Øç ‡ÆÆ‡Æ©‡Øç‡Æ©‡Æ∞‡Øç‡Æï‡Æ≥‡Øç (‡Æö‡Øã‡Æ¥‡Æ∞‡Øç, ‡Æ™‡Ææ‡Æ£‡Øç‡Æü‡Æø‡ÆØ‡Æ∞‡Øç, ‡Æ™‡Æ≤‡Øç‡Æ≤‡Æµ‡Æ∞‡Øç, ‡Æö‡Øá‡Æ∞‡Æ∞‡Øç)
   - ‡Æ§‡ÆÆ‡Æø‡Æ¥‡Øç ‡Æ™‡Æ£‡Øç‡Æ™‡Ææ‡Æü‡ØÅ ‡ÆÆ‡Æ±‡Øç‡Æ±‡ØÅ‡ÆÆ‡Øç ‡Æ™‡Ææ‡Æ∞‡ÆÆ‡Øç‡Æ™‡Æ∞‡Æø‡ÆØ‡ÆÆ‡Øç
"""

# -----------------------------
# Enhanced Wikipedia search with better error handling
def get_wikipedia_content(query):
    """Fetch Wikipedia content with enhanced search strategies"""
    try:
        # Strategy 1: Direct search in Tamil
        page = wiki_ta.page(query)
        if page.exists():
            summary = page.summary.strip()
            if len(summary) > 100:
                return {
                    'content': summary[:2000],
                    'title': page.title,
                    'url': page.fullurl,
                    'language': '‡Æ§‡ÆÆ‡Æø‡Æ¥‡Øç'
                }
        
        # Strategy 2: Search with Tamil keywords
        tamil_keywords = ['‡Æ§‡ÆÆ‡Æø‡Æ¥‡Øç', '‡Æá‡Æ≤‡Æï‡Øç‡Æï‡Æø‡ÆØ‡ÆÆ‡Øç', '‡Æµ‡Æ∞‡Æ≤‡Ææ‡Æ±‡ØÅ', '‡Æ™‡Æ£‡Øç‡Æ™‡Ææ‡Æü‡ØÅ', '‡Æï‡Æµ‡Æø‡Æ§‡Øà', '‡Æö‡Æô‡Øç‡Æï ‡Æá‡Æ≤‡Æï‡Øç‡Æï‡Æø‡ÆØ‡ÆÆ‡Øç']
        for keyword in tamil_keywords:
            combined_query = f"{query} {keyword}"
            page = wiki_ta.page(combined_query)
            if page.exists():
                summary = page.summary.strip()
                if len(summary) > 100:
                    return {
                        'content': summary[:2000],
                        'title': page.title,
                        'url': page.fullurl,
                        'language': '‡Æ§‡ÆÆ‡Æø‡Æ¥‡Øç'
                    }
        
        # Strategy 3: English Wikipedia as fallback
        eng_page = wiki_en.page(query)
        if eng_page.exists():
            summary = eng_page.summary.strip()
            if len(summary) > 100:
                return {
                    'content': f"[‡Æ§‡ÆÆ‡Æø‡Æ¥‡Øç ‡Æµ‡Æø‡Æï‡Øç‡Æï‡Æø‡Æ™‡Øç‡Æ™‡ØÄ‡Æü‡Æø‡ÆØ‡Ææ‡Æµ‡Æø‡Æ≤‡Øç ‡Æá‡Æ≤‡Øç‡Æ≤‡Øà. ‡ÆÜ‡Æô‡Øç‡Æï‡Æø‡Æ≤ ‡Æµ‡Æø‡Æï‡Øç‡Æï‡Æø‡Æ™‡Øç‡Æ™‡ØÄ‡Æü‡Æø‡ÆØ‡Ææ:]\n{summary[:1500]}",
                    'title': eng_page.title,
                    'url': eng_page.fullurl,
                    'language': '‡ÆÜ‡Æô‡Øç‡Æï‡Æø‡Æ≤‡ÆÆ‡Øç'
                }
        
        return None
        
    except Exception as e:
        st.error(f"‡Æµ‡Æø‡Æï‡Øç‡Æï‡Æø‡Æ™‡Øç‡Æ™‡ØÄ‡Æü‡Æø‡ÆØ‡Ææ ‡Æ™‡Æø‡Æ¥‡Øà: {str(e)}")
        return None

# -----------------------------
# Enhanced Google Search with rate limiting
def get_google_content(query):
    """Fetch Google Search content with enhanced error handling"""
    try:
        if not API_KEYS['google_api_key'] or not API_KEYS['google_cx']:
            return None
            
        url = "https://www.googleapis.com/customsearch/v1"
        params = {
            "q": query + " ‡Æ§‡ÆÆ‡Æø‡Æ¥‡Øç",  # Add Tamil to prioritize Tamil results
            "key": API_KEYS['google_api_key'],
            "cx": API_KEYS['google_cx'],
            "lr": "lang_ta",  # Tamil language preference
            "num": 5  # Get top 5 results
        }
        
        response = requests.get(url, params=params, timeout=10)
        response.raise_for_status()
        
        data = response.json()
        
        if "items" in data:
            results = []
            for item in data["items"][:3]:  # Use top 3 results
                result = {
                    'title': item.get("title", ""),
                    'snippet': item.get("snippet", ""),
                    'link': item.get("link", "")
                }
                results.append(result)
            
            combined = "\n\n".join([f"**{r['title']}**\n{r['snippet']}" for r in results])
            return combined[:2000] if combined else None
        
        return None
        
    except requests.exceptions.RequestException as e:
        st.error(f"‡Æï‡ØÇ‡Æï‡ØÅ‡Æ≥‡Øç ‡Æ§‡Øá‡Æü‡Æ≤‡Øç ‡Æ™‡Æø‡Æ¥‡Øà: {str(e)}")
        return None
    except Exception as e:
        st.error(f"‡Æé‡Æ§‡Æø‡Æ∞‡Øç‡Æ™‡Ææ‡Æ∞‡Ææ‡Æ§ ‡Æ™‡Æø‡Æ¥‡Øà: {str(e)}")
        return None

# -----------------------------
# Setup Gemini API with caching
@st.cache_resource
def setup_genai():
    """Initialize Gemini AI configuration"""
    try:
        if not API_KEYS['gemini_api_key']:
            return False
        genai.configure(api_key=API_KEYS['gemini_api_key'])
        return True
    except Exception as e:
        st.error(f"Gemini API ‡Æ§‡ØÅ‡Æµ‡Æï‡Øç‡Æï ‡Æ™‡Æø‡Æ¥‡Øà: {str(e)}")
        return False

# -----------------------------
# Enhanced response generation with better context
def generate_response(query):
    """Generate response using Gemini AI with enhanced context and error handling"""
    try:
        # Fetch content from both sources
        wiki_data = get_wikipedia_content(query)
        google_content = get_google_content(query) if not wiki_data or len(wiki_data.get('content', '')) < 300 else None
        
        # Build enhanced prompt
        full_prompt = SYSTEM_INSTRUCTIONS + "\n\n"
        full_prompt += f"‡Æ™‡ÆØ‡Æ©‡Æ∞‡Øç ‡Æï‡Øá‡Æ≥‡Øç‡Æµ‡Æø: {query}\n\n"
        
        if wiki_data:
            full_prompt += f"‡Æµ‡Æø‡Æï‡Øç‡Æï‡Æø‡Æ™‡Øç‡Æ™‡ØÄ‡Æü‡Æø‡ÆØ‡Ææ ‡Æ§‡Æï‡Æµ‡Æ≤‡Øç ({wiki_data['language']}):\n"
            full_prompt += f"‡Æ§‡Æ≤‡Øà‡Æ™‡Øç‡Æ™‡ØÅ: {wiki_data['title']}\n"
            full_prompt += f"{wiki_data['content']}\n\n"
        
        if google_content:
            full_prompt += f"‡Æï‡ØÇ‡Æï‡ØÅ‡Æ≥‡Øç ‡Æ§‡Øá‡Æü‡Æ≤‡Øç ‡Æ§‡Æï‡Æµ‡Æ≤‡Øç:\n{google_content}\n\n"
        
        full_prompt += """
        ‡ÆÆ‡Øá‡Æ±‡Øç‡Æï‡Æ£‡Øç‡Æü ‡Æ§‡Æï‡Æµ‡Æ≤‡Øç‡Æï‡Æ≥‡Øà ‡Æ™‡ÆØ‡Æ©‡Øç‡Æ™‡Æü‡ØÅ‡Æ§‡Øç‡Æ§‡Æø:
        1. ‡Æ§‡ØÜ‡Æ≥‡Æø‡Æµ‡Ææ‡Æ© ‡ÆÆ‡Æ±‡Øç‡Æ±‡ØÅ‡ÆÆ‡Øç ‡Æµ‡Æø‡Æ∞‡Æø‡Æµ‡Ææ‡Æ© ‡Æ™‡Æ§‡Æø‡Æ≤‡Øà ‡Æ§‡ÆÆ‡Æø‡Æ¥‡Æø‡Æ≤‡Øç ‡Æµ‡Æ¥‡Æô‡Øç‡Æï‡Æµ‡ØÅ‡ÆÆ‡Øç
        2. ‡ÆÆ‡ØÅ‡Æï‡Øç‡Æï‡Æø‡ÆØ ‡ÆÖ‡ÆÆ‡Øç‡Æö‡Æô‡Øç‡Æï‡Æ≥‡Øà ‡Æ™‡ØÅ‡Æ≥‡Øç‡Æ≥‡Æø‡Æï‡Æ≥‡Ææ‡Æï (bullet points) ‡Æï‡ØÅ‡Æ±‡Æø‡Æ™‡Øç‡Æ™‡Æø‡Æü‡Æµ‡ØÅ‡ÆÆ‡Øç
        3. ‡Æ§‡Æï‡Æµ‡Æ≤‡Øç ‡ÆÜ‡Æ§‡Ææ‡Æ∞‡Æ§‡Øç‡Æ§‡Øà ‡Æï‡ØÅ‡Æ±‡Æø‡Æ™‡Øç‡Æ™‡Æø‡Æü‡Æµ‡ØÅ‡ÆÆ‡Øç
        4. ‡Æ™‡ÆØ‡Æ©‡Æ∞‡ØÅ‡Æï‡Øç‡Æï‡ØÅ ‡Æ™‡ÆØ‡Æ©‡ØÅ‡Æ≥‡Øç‡Æ≥ ‡Æï‡ØÇ‡Æü‡ØÅ‡Æ§‡Æ≤‡Øç ‡Æ§‡Æï‡Æµ‡Æ≤‡Øç‡Æï‡Æ≥‡Øà‡ÆØ‡ØÅ‡ÆÆ‡Øç ‡Æö‡Øá‡Æ∞‡Øç‡Æï‡Øç‡Æï‡Æµ‡ØÅ‡ÆÆ‡Øç
        """
        
        # Safety settings
        safety_settings = {
            HarmCategory.HARM_CATEGORY_HARASSMENT: HarmBlockThreshold.BLOCK_NONE,
            HarmCategory.HARM_CATEGORY_HATE_SPEECH: HarmBlockThreshold.BLOCK_NONE,
            HarmCategory.HARM_CATEGORY_SEXUALLY_EXPLICIT: HarmBlockThreshold.BLOCK_NONE,
            HarmCategory.HARM_CATEGORY_DANGEROUS_CONTENT: HarmBlockThreshold.BLOCK_NONE,
        }
        
        # Initialize Gemini model
        model = genai.GenerativeModel(
            model_name="gemini-1.5-flash",
            generation_config={
                "temperature": 0.3,
                "top_p": 0.95,
                "top_k": 40,
                "max_output_tokens": 3000,
            },
            safety_settings=safety_settings
        )
        
        # Generate response
        response = model.generate_content(full_prompt)
        response_text = response.text
        
        # Determine sources used
        sources = []
        if wiki_data:
            sources.append(f"‡Æµ‡Æø‡Æï‡Øç‡Æï‡Æø‡Æ™‡Øç‡Æ™‡ØÄ‡Æü‡Æø‡ÆØ‡Ææ ({wiki_data['language']})")
        if google_content:
            sources.append("‡Æï‡ØÇ‡Æï‡ØÅ‡Æ≥‡Øç ‡Æ§‡Øá‡Æü‡Æ≤‡Øç")
        
        source_used = " ‡ÆÆ‡Æ±‡Øç‡Æ±‡ØÅ‡ÆÆ‡Øç ".join(sources) if sources else "‡Æ§‡Æï‡Æµ‡Æ≤‡Øç ‡ÆÜ‡Æ§‡Ææ‡Æ∞‡ÆÆ‡Øç ‡Æá‡Æ≤‡Øç‡Æ≤‡Øà"
        
        # Add wiki URL if available
        wiki_url = wiki_data['url'] if wiki_data else None
        
        return response_text, source_used, wiki_url
        
    except Exception as e:
        error_msg = f"‡Æ™‡Æ§‡Æø‡Æ≤‡Øç ‡Æâ‡Æ∞‡ØÅ‡Æµ‡Ææ‡Æï‡Øç‡Æï‡ØÅ‡Æµ‡Æ§‡Æø‡Æ≤‡Øç ‡Æ™‡Æø‡Æ¥‡Øà: {str(e)}"
        st.error(error_msg)
        return "‡ÆÆ‡Æ©‡Øç‡Æ©‡Æø‡Æï‡Øç‡Æï‡Æµ‡ØÅ‡ÆÆ‡Øç, ‡Æ™‡Æ§‡Æø‡Æ≤‡Øç ‡Æâ‡Æ∞‡ØÅ‡Æµ‡Ææ‡Æï‡Øç‡Æï‡ØÅ‡Æµ‡Æ§‡Æø‡Æ≤‡Øç ‡Æ™‡Æø‡Æ¥‡Øà ‡Æè‡Æ±‡Øç‡Æ™‡Æü‡Øç‡Æü‡Æ§‡ØÅ. ‡ÆÆ‡ØÄ‡Æ£‡Øç‡Æü‡ØÅ‡ÆÆ‡Øç ‡ÆÆ‡ØÅ‡ÆØ‡Æ±‡Øç‡Æö‡Æø‡Æï‡Øç‡Æï‡Æµ‡ØÅ‡ÆÆ‡Øç.", None, None

# -----------------------------
# Quick action examples
def get_quick_actions():
    """Return quick action examples"""
    return [
        "‡Æ§‡Æø‡Æ∞‡ØÅ‡Æï‡Øç‡Æï‡ØÅ‡Æ±‡Æ≥‡Øç ‡Æ™‡Æ±‡Øç‡Æ±‡Æø",
        "‡Æö‡Æô‡Øç‡Æï ‡Æá‡Æ≤‡Æï‡Øç‡Æï‡Æø‡ÆØ‡ÆÆ‡Øç",
        "‡Æö‡Øã‡Æ¥‡Æ∞‡Øç ‡Æµ‡Æ∞‡Æ≤‡Ææ‡Æ±‡ØÅ",
        "‡Æ§‡ÆÆ‡Æø‡Æ¥‡Øç ‡Æé‡Æ¥‡ØÅ‡Æ§‡Øç‡Æ§‡ØÅ‡Æï‡Æ≥‡Øç",
        "‡Æö‡Æø‡Æ≤‡Æ™‡Øç‡Æ™‡Æ§‡Æø‡Æï‡Ææ‡Æ∞‡ÆÆ‡Øç",
        "‡Æ™‡Æ≤‡Øç‡Æ≤‡Æµ‡Æ∞‡Øç ‡Æï‡Æü‡Øç‡Æü‡Æø‡Æü‡Æï‡Øç‡Æï‡Æ≤‡Øà"
    ]

# -----------------------------
# Main UI
# Custom header
st.markdown("""
<div class="header-container">
    <div class="header-title">ü™∑ ‡Æ§‡ÆÆ‡Æø‡Æ¥‡Øç ‡Æ§‡Æï‡Æµ‡Æ≤‡Øç ‡Æâ‡Æ§‡Æµ‡Æø‡ÆØ‡Ææ‡Æ≥‡Æ∞‡Øç</div>
    <div class="header-subtitle">‡Æ§‡ÆÆ‡Æø‡Æ¥‡Øç ‡Æµ‡Æ∞‡Æ≤‡Ææ‡Æ±‡ØÅ, ‡Æá‡Æ≤‡Æï‡Øç‡Æï‡Æø‡ÆØ‡ÆÆ‡Øç, ‡Æ™‡Æ£‡Øç‡Æ™‡Ææ‡Æü‡ØÅ ‡Æ™‡Æ±‡Øç‡Æ±‡Æø‡ÆØ ‡Æ§‡ØÅ‡Æ≤‡Øç‡Æ≤‡Æø‡ÆØ‡ÆÆ‡Ææ‡Æ© ‡Æ§‡Æï‡Æµ‡Æ≤‡Øç‡Æï‡Æ≥‡Øç</div>
</div>
""", unsafe_allow_html=True)

# Sidebar
with st.sidebar:
    st.header("üìä ‡Æ™‡ÆØ‡Æ©‡Øç‡Æ™‡Ææ‡Æü‡Øç‡Æü‡ØÅ ‡Æ®‡Æø‡Æ≤‡Øà")
    
    # Check API status
    api_status = all([API_KEYS['gemini_api_key'], API_KEYS['google_api_key'], API_KEYS['google_cx']])
    
    if api_status:
        st.markdown("""
        <div style="display: flex; align-items: center;">
            <span class="status-indicator status-active"></span>
            <span style="color: #4ade80;">‡ÆÖ‡Æ©‡Øà‡Æ§‡Øç‡Æ§‡ØÅ ‡Æö‡Øá‡Æµ‡Øà‡Æï‡Æ≥‡ØÅ‡ÆÆ‡Øç ‡Æö‡ØÜ‡ÆØ‡Æ≤‡Æø‡Æ≤‡Øç ‡Æâ‡Æ≥‡Øç‡Æ≥‡Æ©</span>
        </div>
        """, unsafe_allow_html=True)
    else:
        st.markdown("""
        <div style="display: flex; align-items: center;">
            <span class="status-indicator status-inactive"></span>
            <span style="color: #f87171;">API ‡Æµ‡Æø‡Æö‡Øà‡Æï‡Æ≥‡Øç ‡Æï‡Æø‡Æü‡Øà‡Æï‡Øç‡Æï‡Æµ‡Æø‡Æ≤‡Øç‡Æ≤‡Øà</span>
        </div>
        """, unsafe_allow_html=True)
        
        missing_keys = []
        if not API_KEYS['gemini_api_key']:
            missing_keys.append("Gemini API")
        if not API_KEYS['google_api_key']:
            missing_keys.append("Google Search API")
        if not API_KEYS['google_cx']:
            missing_keys.append("Google CX")
        
        if missing_keys:
            st.error(f"‡Æá‡Æ≤‡Øç‡Æ≤‡Ææ‡Æ§ ‡Æµ‡Æø‡Æö‡Øà‡Æï‡Æ≥‡Øç: {', '.join(missing_keys)}")
    
    st.markdown("---")
    
    # Statistics
    st.markdown("### üìà ‡Æ™‡ØÅ‡Æ≥‡Øç‡Æ≥‡Æø‡Æµ‡Æø‡Æµ‡Æ∞‡Æô‡Øç‡Æï‡Æ≥‡Øç")
    col1, col2 = st.columns(2)
    with col1:
        st.metric("‡ÆÆ‡Øä‡Æ§‡Øç‡Æ§ ‡Æï‡Øá‡Æ≥‡Øç‡Æµ‡Æø‡Æï‡Æ≥‡Øç", len(st.session_state.get('messages', [])) // 2)
    with col2:
        st.metric("‡ÆÖ‡ÆÆ‡Æ∞‡Øç‡Æµ‡ØÅ ‡Æ®‡Øá‡Æ∞‡ÆÆ‡Øç", f"{int((time.time() - st.session_state.get('start_time', time.time())) / 60)} ‡Æ®‡Æø‡ÆÆ‡Æø‡Æü‡Æô‡Øç‡Æï‡Æ≥‡Øç")
    
    st.markdown("---")
    
    # About section
    with st.expander("‚ÑπÔ∏è ‡Æ™‡ÆØ‡Æ©‡Øç‡Æ™‡Ææ‡Æü‡Øç‡Æü‡ØÅ ‡Æ§‡Æï‡Æµ‡Æ≤‡Øç"):
        st.markdown("""
        ### ‡ÆÆ‡ØÅ‡Æï‡Øç‡Æï‡Æø‡ÆØ ‡ÆÖ‡ÆÆ‡Øç‡Æö‡Æô‡Øç‡Æï‡Æ≥‡Øç:
        - üîç ‡Æµ‡Æø‡Æï‡Øç‡Æï‡Æø‡Æ™‡Øç‡Æ™‡ØÄ‡Æü‡Æø‡ÆØ‡Ææ ‡Æ§‡Øá‡Æü‡Æ≤‡Øç (‡Æ§‡ÆÆ‡Æø‡Æ¥‡Øç & ‡ÆÜ‡Æô‡Øç‡Æï‡Æø‡Æ≤‡ÆÆ‡Øç)
        - üåê ‡Æï‡ØÇ‡Æï‡ØÅ‡Æ≥‡Øç ‡Æ§‡Øá‡Æü‡Æ≤‡Øç ‡Æí‡Æ∞‡ØÅ‡Æô‡Øç‡Æï‡Æø‡Æ£‡Øà‡Æ™‡Øç‡Æ™‡ØÅ
        - ü§ñ Gemini AI ‡Æ™‡ÆØ‡Æ©‡Øç‡Æ™‡Ææ‡Æü‡ØÅ
        - üí¨ ‡Æá‡ÆØ‡Æ±‡Øç‡Æï‡Øà‡ÆØ‡Ææ‡Æ© ‡Æâ‡Æ∞‡Øà‡ÆØ‡Ææ‡Æü‡Æ≤‡Øç
        - üìö ‡Æµ‡Æø‡Æ∞‡Æø‡Æµ‡Ææ‡Æ© ‡Æ§‡ÆÆ‡Æø‡Æ¥‡Øç ‡Æá‡Æ≤‡Æï‡Øç‡Æï‡Æø‡ÆØ ‡Æ§‡Æï‡Æµ‡Æ≤‡Øç
        
        ### ‡Æö‡Æø‡Æ±‡Æ™‡Øç‡Æ™‡ØÅ ‡Æ§‡Æ≤‡Øà‡Æ™‡Øç‡Æ™‡ØÅ‡Æï‡Æ≥‡Øç:
        - ‡Æö‡Æô‡Øç‡Æï ‡Æá‡Æ≤‡Æï‡Øç‡Æï‡Æø‡ÆØ‡ÆÆ‡Øç
        - ‡Æ§‡Æø‡Æ∞‡ØÅ‡Æï‡Øç‡Æï‡ØÅ‡Æ±‡Æ≥‡Øç
        - ‡Æ§‡ÆÆ‡Æø‡Æ¥‡Øç ‡Æµ‡Æ∞‡Æ≤‡Ææ‡Æ±‡ØÅ
        - ‡Æï‡Øã‡ÆØ‡Æø‡Æ≤‡Øç ‡Æï‡Æü‡Øç‡Æü‡Æø‡Æü‡Æï‡Øç‡Æï‡Æ≤‡Øà
        - ‡Æ™‡Æ£‡Øç‡Æ™‡Ææ‡Æü‡Øç‡Æü‡ØÅ ‡ÆÆ‡Æ∞‡Æ™‡ØÅ‡Æï‡Æ≥‡Øç
        """)
    
    # Clear chat button
    if st.button("üîÑ ‡Æ™‡ØÅ‡Æ§‡Æø‡ÆØ ‡Æâ‡Æ∞‡Øà‡ÆØ‡Ææ‡Æü‡Æ≤‡Øç ‡Æ§‡Øä‡Æü‡Æô‡Øç‡Æï‡ØÅ", use_container_width=True):
        st.session_state.messages = []
        st.rerun()

# Initialize session state
if 'messages' not in st.session_state:
    st.session_state.messages = []
    st.session_state.start_time = time.time()

if 'start_time' not in st.session_state:
    st.session_state.start_time = time.time()

# Quick actions (only show if no messages)
if len(st.session_state.messages) == 0:
    st.markdown("### üöÄ ‡Æµ‡Æø‡Æ∞‡Øà‡Æµ‡ØÅ ‡Æ§‡Øä‡Æü‡Æï‡Øç‡Æï‡ÆÆ‡Øç")
    st.markdown("‡Æï‡ØÄ‡Æ¥‡Øç‡Æï‡Øç‡Æï‡Æ£‡Øç‡Æü ‡Æ™‡Øä‡Æ§‡Øç‡Æ§‡Ææ‡Æ©‡Øç‡Æï‡Æ≥‡Øà ‡ÆÖ‡Æ¥‡ØÅ‡Æ§‡Øç‡Æ§‡Æø ‡Æâ‡Æü‡Æ©‡Æü‡Æø‡ÆØ‡Ææ‡Æï ‡Æ§‡Æï‡Æµ‡Æ≤‡Øç ‡Æ™‡ØÜ‡Æ±‡ØÅ‡Æô‡Øç‡Æï‡Æ≥‡Øç:")
    
    cols = st.columns(3)
    for i, action in enumerate(get_quick_actions()):
        with cols[i % 3]:
            if st.button(action, key=f"quick_{i}", use_container_width=True):
                st.session_state.quick_query = action

# Display chat messages
for message in st.session_state.messages:
    with st.chat_message(message["role"], avatar="üßë" if message["role"] == "user" else "ü§ñ"):
        st.markdown(message["content"])
        if "source_type" in message and message["source_type"]:
            st.markdown(f'<span class="source-badge">üìö {message["source_type"]}</span>', unsafe_allow_html=True)
        if "wiki_url" in message and message.get("wiki_url"):
            st.markdown(f"[üîó ‡Æµ‡Æø‡Æï‡Øç‡Æï‡Æø‡Æ™‡Øç‡Æ™‡ØÄ‡Æü‡Æø‡ÆØ‡Ææ ‡Æ™‡Æï‡Øç‡Æï‡ÆÆ‡Øç]({message['wiki_url']})")

# Handle quick query
if 'quick_query' in st.session_state:
    query = st.session_state.quick_query
    del st.session_state.quick_query
    st.session_state.messages.append({"role": "user", "content": query})
    st.rerun()

# User input
if query := st.chat_input("‡Æâ‡Æô‡Øç‡Æï‡Æ≥‡Øç ‡Æï‡Øá‡Æ≥‡Øç‡Æµ‡Æø‡ÆØ‡Øà ‡Æ§‡ÆÆ‡Æø‡Æ¥‡Æø‡Æ≤‡Øç ‡Æï‡Øá‡Æ≥‡ØÅ‡Æô‡Øç‡Æï‡Æ≥‡Øç... (‡Æé.‡Æï‡Ææ: ‡Æ§‡Æø‡Æ∞‡ØÅ‡Æï‡Øç‡Æï‡ØÅ‡Æ±‡Æ≥‡Øç ‡Æ™‡Æ±‡Øç‡Æ±‡Æø ‡Æö‡Øä‡Æ≤‡Øç‡Æ≤‡ØÅ‡Æô‡Øç‡Æï‡Æ≥‡Øç)"):
    if not API_KEYS['gemini_api_key']:
        st.error("‚ö†Ô∏è Gemini API key ‡Æï‡Æø‡Æü‡Øà‡Æï‡Øç‡Æï‡Æµ‡Æø‡Æ≤‡Øç‡Æ≤‡Øà. Streamlit secrets-‡Æ≤‡Øç ‡Æö‡Æ∞‡Æø‡Æ™‡Ææ‡Æ∞‡Øç‡Æï‡Øç‡Æï‡Æµ‡ØÅ‡ÆÆ‡Øç.")
    else:
        # Add user message
        st.session_state.messages.append({"role": "user", "content": query})
        with st.chat_message("user", avatar="üßë"):
            st.markdown(query)
        
        # Generate and display assistant response
        with st.chat_message("assistant", avatar="ü§ñ"):
            # Show custom loading animation
            loading_placeholder = st.empty()
            loading_placeholder.markdown("""
            <div class="loading-dots">
                ‡Æ™‡Æ§‡Æø‡Æ≤‡Øç ‡Æ§‡ÆØ‡Ææ‡Æ∞‡Ææ‡Æï‡Æø‡Æ±‡Æ§‡ØÅ
                <span></span>
                <span></span>
                <span></span>
            </div>
            """, unsafe_allow_html=True)
            
            # Setup Gemini and generate response
            if setup_genai():
                response, source_used, wiki_url = generate_response(query)
                
                # Clear loading animation
                loading_placeholder.empty()
                
                # Display response
                st.markdown(response)
                
                if source_used:
                    st.markdown(f'<span class="source-badge">üìö {source_used}</span>', unsafe_allow_html=True)
                
                if wiki_url:
                    st.markdown(f"[üîó ‡Æµ‡Æø‡Æï‡Øç‡Æï‡Æø‡Æ™‡Øç‡Æ™‡ØÄ‡Æü‡Æø‡ÆØ‡Ææ ‡Æ™‡Æï‡Øç‡Æï‡ÆÆ‡Øç]({wiki_url})")
                
                # Save to session state
                st.session_state.messages.append({
                    "role": "assistant",
                    "content": response,
                    "source_type": source_used,
                    "wiki_url": wiki_url
                })
            else:
                loading_placeholder.empty()
                st.error("API ‡ÆÖ‡ÆÆ‡Øà‡Æ™‡Øç‡Æ™‡Æø‡Æ≤‡Øç ‡Æ™‡Æø‡Æ¥‡Øà. ‡ÆÆ‡ØÄ‡Æ£‡Øç‡Æü‡ØÅ‡ÆÆ‡Øç ‡ÆÆ‡ØÅ‡ÆØ‡Æ±‡Øç‡Æö‡Æø‡Æï‡Øç‡Æï‡Æµ‡ØÅ‡ÆÆ‡Øç.")

# Footer
st.markdown("---")
st.markdown("""
<div style="text-align: center; color: #888; font-size: 0.9rem;">
    ü™∑ ‡Æ§‡ÆÆ‡Æø‡Æ¥‡Øç ‡ÆÆ‡Øä‡Æ¥‡Æø ‡ÆÆ‡Æ±‡Øç‡Æ±‡ØÅ‡ÆÆ‡Øç ‡Æ™‡Æ£‡Øç‡Æ™‡Ææ‡Æü‡Øç‡Æü‡Øà ‡Æï‡Ææ‡Æï‡Øç‡Æï ‡Æâ‡Æ∞‡ØÅ‡Æµ‡Ææ‡Æï‡Øç‡Æï‡Æ™‡Øç‡Æ™‡Æü‡Øç‡Æü‡Æ§‡ØÅ | 
    Powered by Gemini AI & Wikipedia
</div>
""", unsafe_allow_html=True)
